
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Nominator
 * 
 */
export type Nominator = $Result.DefaultSelection<Prisma.$NominatorPayload>
/**
 * Model Nominee
 * 
 */
export type Nominee = $Result.DefaultSelection<Prisma.$NomineePayload>
/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Status: {
  CREATED: 'CREATED',
  CONFIRMED: 'CONFIRMED',
  VERIFIED: 'VERIFIED',
  APPROVED: 'APPROVED',
  DENIED: 'DENIED',
  SENT: 'SENT'
};

export type Status = (typeof Status)[keyof typeof Status]

}

export type Status = $Enums.Status

export const Status: typeof $Enums.Status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Nominators
 * const nominators = await prisma.nominator.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Nominators
   * const nominators = await prisma.nominator.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.nominator`: Exposes CRUD operations for the **Nominator** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nominators
    * const nominators = await prisma.nominator.findMany()
    * ```
    */
  get nominator(): Prisma.NominatorDelegate<ExtArgs>;

  /**
   * `prisma.nominee`: Exposes CRUD operations for the **Nominee** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nominees
    * const nominees = await prisma.nominee.findMany()
    * ```
    */
  get nominee(): Prisma.NomineeDelegate<ExtArgs>;

  /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.20.0
   * Query Engine version: 06fc58a368dc7be9fbbbe894adf8d445d208c284
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Nominator: 'Nominator',
    Nominee: 'Nominee',
    Admin: 'Admin'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "nominator" | "nominee" | "admin"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Nominator: {
        payload: Prisma.$NominatorPayload<ExtArgs>
        fields: Prisma.NominatorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NominatorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NominatorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NominatorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NominatorPayload>
          }
          findFirst: {
            args: Prisma.NominatorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NominatorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NominatorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NominatorPayload>
          }
          findMany: {
            args: Prisma.NominatorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NominatorPayload>[]
          }
          create: {
            args: Prisma.NominatorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NominatorPayload>
          }
          createMany: {
            args: Prisma.NominatorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NominatorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NominatorPayload>
          }
          update: {
            args: Prisma.NominatorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NominatorPayload>
          }
          deleteMany: {
            args: Prisma.NominatorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NominatorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NominatorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NominatorPayload>
          }
          aggregate: {
            args: Prisma.NominatorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNominator>
          }
          groupBy: {
            args: Prisma.NominatorGroupByArgs<ExtArgs>
            result: $Utils.Optional<NominatorGroupByOutputType>[]
          }
          count: {
            args: Prisma.NominatorCountArgs<ExtArgs>
            result: $Utils.Optional<NominatorCountAggregateOutputType> | number
          }
        }
      }
      Nominee: {
        payload: Prisma.$NomineePayload<ExtArgs>
        fields: Prisma.NomineeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NomineeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NomineePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NomineeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NomineePayload>
          }
          findFirst: {
            args: Prisma.NomineeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NomineePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NomineeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NomineePayload>
          }
          findMany: {
            args: Prisma.NomineeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NomineePayload>[]
          }
          create: {
            args: Prisma.NomineeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NomineePayload>
          }
          createMany: {
            args: Prisma.NomineeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.NomineeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NomineePayload>
          }
          update: {
            args: Prisma.NomineeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NomineePayload>
          }
          deleteMany: {
            args: Prisma.NomineeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NomineeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NomineeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NomineePayload>
          }
          aggregate: {
            args: Prisma.NomineeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNominee>
          }
          groupBy: {
            args: Prisma.NomineeGroupByArgs<ExtArgs>
            result: $Utils.Optional<NomineeGroupByOutputType>[]
          }
          count: {
            args: Prisma.NomineeCountArgs<ExtArgs>
            result: $Utils.Optional<NomineeCountAggregateOutputType> | number
          }
        }
      }
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type NominatorCountOutputType
   */

  export type NominatorCountOutputType = {
    Nominee: number
  }

  export type NominatorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Nominee?: boolean | NominatorCountOutputTypeCountNomineeArgs
  }

  // Custom InputTypes
  /**
   * NominatorCountOutputType without action
   */
  export type NominatorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NominatorCountOutputType
     */
    select?: NominatorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NominatorCountOutputType without action
   */
  export type NominatorCountOutputTypeCountNomineeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NomineeWhereInput
  }


  /**
   * Count Type AdminCountOutputType
   */

  export type AdminCountOutputType = {
    Nominee: number
  }

  export type AdminCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Nominee?: boolean | AdminCountOutputTypeCountNomineeArgs
  }

  // Custom InputTypes
  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdminCountOutputType
     */
    select?: AdminCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AdminCountOutputType without action
   */
  export type AdminCountOutputTypeCountNomineeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NomineeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Nominator
   */

  export type AggregateNominator = {
    _count: NominatorCountAggregateOutputType | null
    _min: NominatorMinAggregateOutputType | null
    _max: NominatorMaxAggregateOutputType | null
  }

  export type NominatorMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type NominatorMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
  }

  export type NominatorCountAggregateOutputType = {
    id: number
    username: number
    password: number
    _all: number
  }


  export type NominatorMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type NominatorMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
  }

  export type NominatorCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    _all?: true
  }

  export type NominatorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nominator to aggregate.
     */
    where?: NominatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nominators to fetch.
     */
    orderBy?: NominatorOrderByWithRelationInput | NominatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NominatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nominators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nominators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nominators
    **/
    _count?: true | NominatorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NominatorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NominatorMaxAggregateInputType
  }

  export type GetNominatorAggregateType<T extends NominatorAggregateArgs> = {
        [P in keyof T & keyof AggregateNominator]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNominator[P]>
      : GetScalarType<T[P], AggregateNominator[P]>
  }




  export type NominatorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NominatorWhereInput
    orderBy?: NominatorOrderByWithAggregationInput | NominatorOrderByWithAggregationInput[]
    by: NominatorScalarFieldEnum[] | NominatorScalarFieldEnum
    having?: NominatorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NominatorCountAggregateInputType | true
    _min?: NominatorMinAggregateInputType
    _max?: NominatorMaxAggregateInputType
  }

  export type NominatorGroupByOutputType = {
    id: string
    username: string
    password: string
    _count: NominatorCountAggregateOutputType | null
    _min: NominatorMinAggregateOutputType | null
    _max: NominatorMaxAggregateOutputType | null
  }

  type GetNominatorGroupByPayload<T extends NominatorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NominatorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NominatorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NominatorGroupByOutputType[P]>
            : GetScalarType<T[P], NominatorGroupByOutputType[P]>
        }
      >
    >


  export type NominatorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    Nominee?: boolean | Nominator$NomineeArgs<ExtArgs>
    _count?: boolean | NominatorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nominator"]>


  export type NominatorSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
  }

  export type NominatorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Nominee?: boolean | Nominator$NomineeArgs<ExtArgs>
    _count?: boolean | NominatorCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $NominatorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nominator"
    objects: {
      Nominee: Prisma.$NomineePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
    }, ExtArgs["result"]["nominator"]>
    composites: {}
  }

  type NominatorGetPayload<S extends boolean | null | undefined | NominatorDefaultArgs> = $Result.GetResult<Prisma.$NominatorPayload, S>

  type NominatorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NominatorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NominatorCountAggregateInputType | true
    }

  export interface NominatorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nominator'], meta: { name: 'Nominator' } }
    /**
     * Find zero or one Nominator that matches the filter.
     * @param {NominatorFindUniqueArgs} args - Arguments to find a Nominator
     * @example
     * // Get one Nominator
     * const nominator = await prisma.nominator.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NominatorFindUniqueArgs>(args: SelectSubset<T, NominatorFindUniqueArgs<ExtArgs>>): Prisma__NominatorClient<$Result.GetResult<Prisma.$NominatorPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Nominator that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NominatorFindUniqueOrThrowArgs} args - Arguments to find a Nominator
     * @example
     * // Get one Nominator
     * const nominator = await prisma.nominator.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NominatorFindUniqueOrThrowArgs>(args: SelectSubset<T, NominatorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NominatorClient<$Result.GetResult<Prisma.$NominatorPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Nominator that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NominatorFindFirstArgs} args - Arguments to find a Nominator
     * @example
     * // Get one Nominator
     * const nominator = await prisma.nominator.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NominatorFindFirstArgs>(args?: SelectSubset<T, NominatorFindFirstArgs<ExtArgs>>): Prisma__NominatorClient<$Result.GetResult<Prisma.$NominatorPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Nominator that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NominatorFindFirstOrThrowArgs} args - Arguments to find a Nominator
     * @example
     * // Get one Nominator
     * const nominator = await prisma.nominator.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NominatorFindFirstOrThrowArgs>(args?: SelectSubset<T, NominatorFindFirstOrThrowArgs<ExtArgs>>): Prisma__NominatorClient<$Result.GetResult<Prisma.$NominatorPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Nominators that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NominatorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nominators
     * const nominators = await prisma.nominator.findMany()
     * 
     * // Get first 10 Nominators
     * const nominators = await prisma.nominator.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nominatorWithIdOnly = await prisma.nominator.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NominatorFindManyArgs>(args?: SelectSubset<T, NominatorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NominatorPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Nominator.
     * @param {NominatorCreateArgs} args - Arguments to create a Nominator.
     * @example
     * // Create one Nominator
     * const Nominator = await prisma.nominator.create({
     *   data: {
     *     // ... data to create a Nominator
     *   }
     * })
     * 
     */
    create<T extends NominatorCreateArgs>(args: SelectSubset<T, NominatorCreateArgs<ExtArgs>>): Prisma__NominatorClient<$Result.GetResult<Prisma.$NominatorPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Nominators.
     * @param {NominatorCreateManyArgs} args - Arguments to create many Nominators.
     * @example
     * // Create many Nominators
     * const nominator = await prisma.nominator.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NominatorCreateManyArgs>(args?: SelectSubset<T, NominatorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Nominator.
     * @param {NominatorDeleteArgs} args - Arguments to delete one Nominator.
     * @example
     * // Delete one Nominator
     * const Nominator = await prisma.nominator.delete({
     *   where: {
     *     // ... filter to delete one Nominator
     *   }
     * })
     * 
     */
    delete<T extends NominatorDeleteArgs>(args: SelectSubset<T, NominatorDeleteArgs<ExtArgs>>): Prisma__NominatorClient<$Result.GetResult<Prisma.$NominatorPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Nominator.
     * @param {NominatorUpdateArgs} args - Arguments to update one Nominator.
     * @example
     * // Update one Nominator
     * const nominator = await prisma.nominator.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NominatorUpdateArgs>(args: SelectSubset<T, NominatorUpdateArgs<ExtArgs>>): Prisma__NominatorClient<$Result.GetResult<Prisma.$NominatorPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Nominators.
     * @param {NominatorDeleteManyArgs} args - Arguments to filter Nominators to delete.
     * @example
     * // Delete a few Nominators
     * const { count } = await prisma.nominator.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NominatorDeleteManyArgs>(args?: SelectSubset<T, NominatorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nominators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NominatorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nominators
     * const nominator = await prisma.nominator.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NominatorUpdateManyArgs>(args: SelectSubset<T, NominatorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nominator.
     * @param {NominatorUpsertArgs} args - Arguments to update or create a Nominator.
     * @example
     * // Update or create a Nominator
     * const nominator = await prisma.nominator.upsert({
     *   create: {
     *     // ... data to create a Nominator
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nominator we want to update
     *   }
     * })
     */
    upsert<T extends NominatorUpsertArgs>(args: SelectSubset<T, NominatorUpsertArgs<ExtArgs>>): Prisma__NominatorClient<$Result.GetResult<Prisma.$NominatorPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Nominators.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NominatorCountArgs} args - Arguments to filter Nominators to count.
     * @example
     * // Count the number of Nominators
     * const count = await prisma.nominator.count({
     *   where: {
     *     // ... the filter for the Nominators we want to count
     *   }
     * })
    **/
    count<T extends NominatorCountArgs>(
      args?: Subset<T, NominatorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NominatorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nominator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NominatorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NominatorAggregateArgs>(args: Subset<T, NominatorAggregateArgs>): Prisma.PrismaPromise<GetNominatorAggregateType<T>>

    /**
     * Group by Nominator.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NominatorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NominatorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NominatorGroupByArgs['orderBy'] }
        : { orderBy?: NominatorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NominatorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNominatorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nominator model
   */
  readonly fields: NominatorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nominator.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NominatorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Nominee<T extends Nominator$NomineeArgs<ExtArgs> = {}>(args?: Subset<T, Nominator$NomineeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Nominator model
   */ 
  interface NominatorFieldRefs {
    readonly id: FieldRef<"Nominator", 'String'>
    readonly username: FieldRef<"Nominator", 'String'>
    readonly password: FieldRef<"Nominator", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Nominator findUnique
   */
  export type NominatorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominator
     */
    select?: NominatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NominatorInclude<ExtArgs> | null
    /**
     * Filter, which Nominator to fetch.
     */
    where: NominatorWhereUniqueInput
  }

  /**
   * Nominator findUniqueOrThrow
   */
  export type NominatorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominator
     */
    select?: NominatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NominatorInclude<ExtArgs> | null
    /**
     * Filter, which Nominator to fetch.
     */
    where: NominatorWhereUniqueInput
  }

  /**
   * Nominator findFirst
   */
  export type NominatorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominator
     */
    select?: NominatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NominatorInclude<ExtArgs> | null
    /**
     * Filter, which Nominator to fetch.
     */
    where?: NominatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nominators to fetch.
     */
    orderBy?: NominatorOrderByWithRelationInput | NominatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nominators.
     */
    cursor?: NominatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nominators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nominators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nominators.
     */
    distinct?: NominatorScalarFieldEnum | NominatorScalarFieldEnum[]
  }

  /**
   * Nominator findFirstOrThrow
   */
  export type NominatorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominator
     */
    select?: NominatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NominatorInclude<ExtArgs> | null
    /**
     * Filter, which Nominator to fetch.
     */
    where?: NominatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nominators to fetch.
     */
    orderBy?: NominatorOrderByWithRelationInput | NominatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nominators.
     */
    cursor?: NominatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nominators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nominators.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nominators.
     */
    distinct?: NominatorScalarFieldEnum | NominatorScalarFieldEnum[]
  }

  /**
   * Nominator findMany
   */
  export type NominatorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominator
     */
    select?: NominatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NominatorInclude<ExtArgs> | null
    /**
     * Filter, which Nominators to fetch.
     */
    where?: NominatorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nominators to fetch.
     */
    orderBy?: NominatorOrderByWithRelationInput | NominatorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nominators.
     */
    cursor?: NominatorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nominators from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nominators.
     */
    skip?: number
    distinct?: NominatorScalarFieldEnum | NominatorScalarFieldEnum[]
  }

  /**
   * Nominator create
   */
  export type NominatorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominator
     */
    select?: NominatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NominatorInclude<ExtArgs> | null
    /**
     * The data needed to create a Nominator.
     */
    data: XOR<NominatorCreateInput, NominatorUncheckedCreateInput>
  }

  /**
   * Nominator createMany
   */
  export type NominatorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nominators.
     */
    data: NominatorCreateManyInput | NominatorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Nominator update
   */
  export type NominatorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominator
     */
    select?: NominatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NominatorInclude<ExtArgs> | null
    /**
     * The data needed to update a Nominator.
     */
    data: XOR<NominatorUpdateInput, NominatorUncheckedUpdateInput>
    /**
     * Choose, which Nominator to update.
     */
    where: NominatorWhereUniqueInput
  }

  /**
   * Nominator updateMany
   */
  export type NominatorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nominators.
     */
    data: XOR<NominatorUpdateManyMutationInput, NominatorUncheckedUpdateManyInput>
    /**
     * Filter which Nominators to update
     */
    where?: NominatorWhereInput
  }

  /**
   * Nominator upsert
   */
  export type NominatorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominator
     */
    select?: NominatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NominatorInclude<ExtArgs> | null
    /**
     * The filter to search for the Nominator to update in case it exists.
     */
    where: NominatorWhereUniqueInput
    /**
     * In case the Nominator found by the `where` argument doesn't exist, create a new Nominator with this data.
     */
    create: XOR<NominatorCreateInput, NominatorUncheckedCreateInput>
    /**
     * In case the Nominator was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NominatorUpdateInput, NominatorUncheckedUpdateInput>
  }

  /**
   * Nominator delete
   */
  export type NominatorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominator
     */
    select?: NominatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NominatorInclude<ExtArgs> | null
    /**
     * Filter which Nominator to delete.
     */
    where: NominatorWhereUniqueInput
  }

  /**
   * Nominator deleteMany
   */
  export type NominatorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nominators to delete
     */
    where?: NominatorWhereInput
  }

  /**
   * Nominator.Nominee
   */
  export type Nominator$NomineeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    where?: NomineeWhereInput
    orderBy?: NomineeOrderByWithRelationInput | NomineeOrderByWithRelationInput[]
    cursor?: NomineeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NomineeScalarFieldEnum | NomineeScalarFieldEnum[]
  }

  /**
   * Nominator without action
   */
  export type NominatorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominator
     */
    select?: NominatorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NominatorInclude<ExtArgs> | null
  }


  /**
   * Model Nominee
   */

  export type AggregateNominee = {
    _count: NomineeCountAggregateOutputType | null
    _min: NomineeMinAggregateOutputType | null
    _max: NomineeMaxAggregateOutputType | null
  }

  export type NomineeMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    address: string | null
    placeOfWork: string | null
    occupation: string | null
    email: string | null
    description: string | null
    photoURL: string | null
    nominatorId: string | null
    adminId: string | null
    status: $Enums.Status | null
  }

  export type NomineeMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    phoneNumber: string | null
    address: string | null
    placeOfWork: string | null
    occupation: string | null
    email: string | null
    description: string | null
    photoURL: string | null
    nominatorId: string | null
    adminId: string | null
    status: $Enums.Status | null
  }

  export type NomineeCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    phoneNumber: number
    address: number
    placeOfWork: number
    occupation: number
    email: number
    description: number
    photoURL: number
    nominatorId: number
    adminId: number
    status: number
    _all: number
  }


  export type NomineeMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    address?: true
    placeOfWork?: true
    occupation?: true
    email?: true
    description?: true
    photoURL?: true
    nominatorId?: true
    adminId?: true
    status?: true
  }

  export type NomineeMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    address?: true
    placeOfWork?: true
    occupation?: true
    email?: true
    description?: true
    photoURL?: true
    nominatorId?: true
    adminId?: true
    status?: true
  }

  export type NomineeCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    phoneNumber?: true
    address?: true
    placeOfWork?: true
    occupation?: true
    email?: true
    description?: true
    photoURL?: true
    nominatorId?: true
    adminId?: true
    status?: true
    _all?: true
  }

  export type NomineeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nominee to aggregate.
     */
    where?: NomineeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nominees to fetch.
     */
    orderBy?: NomineeOrderByWithRelationInput | NomineeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NomineeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nominees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nominees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nominees
    **/
    _count?: true | NomineeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NomineeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NomineeMaxAggregateInputType
  }

  export type GetNomineeAggregateType<T extends NomineeAggregateArgs> = {
        [P in keyof T & keyof AggregateNominee]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNominee[P]>
      : GetScalarType<T[P], AggregateNominee[P]>
  }




  export type NomineeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NomineeWhereInput
    orderBy?: NomineeOrderByWithAggregationInput | NomineeOrderByWithAggregationInput[]
    by: NomineeScalarFieldEnum[] | NomineeScalarFieldEnum
    having?: NomineeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NomineeCountAggregateInputType | true
    _min?: NomineeMinAggregateInputType
    _max?: NomineeMaxAggregateInputType
  }

  export type NomineeGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    placeOfWork: string
    occupation: string
    email: string
    description: string
    photoURL: string
    nominatorId: string
    adminId: string
    status: $Enums.Status
    _count: NomineeCountAggregateOutputType | null
    _min: NomineeMinAggregateOutputType | null
    _max: NomineeMaxAggregateOutputType | null
  }

  type GetNomineeGroupByPayload<T extends NomineeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NomineeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NomineeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NomineeGroupByOutputType[P]>
            : GetScalarType<T[P], NomineeGroupByOutputType[P]>
        }
      >
    >


  export type NomineeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    address?: boolean
    placeOfWork?: boolean
    occupation?: boolean
    email?: boolean
    description?: boolean
    photoURL?: boolean
    nominatorId?: boolean
    adminId?: boolean
    status?: boolean
    nominator?: boolean | NominatorDefaultArgs<ExtArgs>
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nominee"]>


  export type NomineeSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    phoneNumber?: boolean
    address?: boolean
    placeOfWork?: boolean
    occupation?: boolean
    email?: boolean
    description?: boolean
    photoURL?: boolean
    nominatorId?: boolean
    adminId?: boolean
    status?: boolean
  }

  export type NomineeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nominator?: boolean | NominatorDefaultArgs<ExtArgs>
    admin?: boolean | AdminDefaultArgs<ExtArgs>
  }

  export type $NomineePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nominee"
    objects: {
      nominator: Prisma.$NominatorPayload<ExtArgs>
      admin: Prisma.$AdminPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      phoneNumber: string
      address: string
      placeOfWork: string
      occupation: string
      email: string
      description: string
      photoURL: string
      nominatorId: string
      adminId: string
      status: $Enums.Status
    }, ExtArgs["result"]["nominee"]>
    composites: {}
  }

  type NomineeGetPayload<S extends boolean | null | undefined | NomineeDefaultArgs> = $Result.GetResult<Prisma.$NomineePayload, S>

  type NomineeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NomineeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NomineeCountAggregateInputType | true
    }

  export interface NomineeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nominee'], meta: { name: 'Nominee' } }
    /**
     * Find zero or one Nominee that matches the filter.
     * @param {NomineeFindUniqueArgs} args - Arguments to find a Nominee
     * @example
     * // Get one Nominee
     * const nominee = await prisma.nominee.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NomineeFindUniqueArgs>(args: SelectSubset<T, NomineeFindUniqueArgs<ExtArgs>>): Prisma__NomineeClient<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Nominee that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NomineeFindUniqueOrThrowArgs} args - Arguments to find a Nominee
     * @example
     * // Get one Nominee
     * const nominee = await prisma.nominee.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NomineeFindUniqueOrThrowArgs>(args: SelectSubset<T, NomineeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NomineeClient<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Nominee that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NomineeFindFirstArgs} args - Arguments to find a Nominee
     * @example
     * // Get one Nominee
     * const nominee = await prisma.nominee.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NomineeFindFirstArgs>(args?: SelectSubset<T, NomineeFindFirstArgs<ExtArgs>>): Prisma__NomineeClient<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Nominee that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NomineeFindFirstOrThrowArgs} args - Arguments to find a Nominee
     * @example
     * // Get one Nominee
     * const nominee = await prisma.nominee.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NomineeFindFirstOrThrowArgs>(args?: SelectSubset<T, NomineeFindFirstOrThrowArgs<ExtArgs>>): Prisma__NomineeClient<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Nominees that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NomineeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nominees
     * const nominees = await prisma.nominee.findMany()
     * 
     * // Get first 10 Nominees
     * const nominees = await prisma.nominee.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nomineeWithIdOnly = await prisma.nominee.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NomineeFindManyArgs>(args?: SelectSubset<T, NomineeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Nominee.
     * @param {NomineeCreateArgs} args - Arguments to create a Nominee.
     * @example
     * // Create one Nominee
     * const Nominee = await prisma.nominee.create({
     *   data: {
     *     // ... data to create a Nominee
     *   }
     * })
     * 
     */
    create<T extends NomineeCreateArgs>(args: SelectSubset<T, NomineeCreateArgs<ExtArgs>>): Prisma__NomineeClient<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Nominees.
     * @param {NomineeCreateManyArgs} args - Arguments to create many Nominees.
     * @example
     * // Create many Nominees
     * const nominee = await prisma.nominee.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NomineeCreateManyArgs>(args?: SelectSubset<T, NomineeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Nominee.
     * @param {NomineeDeleteArgs} args - Arguments to delete one Nominee.
     * @example
     * // Delete one Nominee
     * const Nominee = await prisma.nominee.delete({
     *   where: {
     *     // ... filter to delete one Nominee
     *   }
     * })
     * 
     */
    delete<T extends NomineeDeleteArgs>(args: SelectSubset<T, NomineeDeleteArgs<ExtArgs>>): Prisma__NomineeClient<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Nominee.
     * @param {NomineeUpdateArgs} args - Arguments to update one Nominee.
     * @example
     * // Update one Nominee
     * const nominee = await prisma.nominee.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NomineeUpdateArgs>(args: SelectSubset<T, NomineeUpdateArgs<ExtArgs>>): Prisma__NomineeClient<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Nominees.
     * @param {NomineeDeleteManyArgs} args - Arguments to filter Nominees to delete.
     * @example
     * // Delete a few Nominees
     * const { count } = await prisma.nominee.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NomineeDeleteManyArgs>(args?: SelectSubset<T, NomineeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nominees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NomineeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nominees
     * const nominee = await prisma.nominee.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NomineeUpdateManyArgs>(args: SelectSubset<T, NomineeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nominee.
     * @param {NomineeUpsertArgs} args - Arguments to update or create a Nominee.
     * @example
     * // Update or create a Nominee
     * const nominee = await prisma.nominee.upsert({
     *   create: {
     *     // ... data to create a Nominee
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nominee we want to update
     *   }
     * })
     */
    upsert<T extends NomineeUpsertArgs>(args: SelectSubset<T, NomineeUpsertArgs<ExtArgs>>): Prisma__NomineeClient<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Nominees.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NomineeCountArgs} args - Arguments to filter Nominees to count.
     * @example
     * // Count the number of Nominees
     * const count = await prisma.nominee.count({
     *   where: {
     *     // ... the filter for the Nominees we want to count
     *   }
     * })
    **/
    count<T extends NomineeCountArgs>(
      args?: Subset<T, NomineeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NomineeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nominee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NomineeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NomineeAggregateArgs>(args: Subset<T, NomineeAggregateArgs>): Prisma.PrismaPromise<GetNomineeAggregateType<T>>

    /**
     * Group by Nominee.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NomineeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NomineeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NomineeGroupByArgs['orderBy'] }
        : { orderBy?: NomineeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NomineeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNomineeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nominee model
   */
  readonly fields: NomineeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nominee.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NomineeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nominator<T extends NominatorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NominatorDefaultArgs<ExtArgs>>): Prisma__NominatorClient<$Result.GetResult<Prisma.$NominatorPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    admin<T extends AdminDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AdminDefaultArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Nominee model
   */ 
  interface NomineeFieldRefs {
    readonly id: FieldRef<"Nominee", 'String'>
    readonly firstName: FieldRef<"Nominee", 'String'>
    readonly lastName: FieldRef<"Nominee", 'String'>
    readonly phoneNumber: FieldRef<"Nominee", 'String'>
    readonly address: FieldRef<"Nominee", 'String'>
    readonly placeOfWork: FieldRef<"Nominee", 'String'>
    readonly occupation: FieldRef<"Nominee", 'String'>
    readonly email: FieldRef<"Nominee", 'String'>
    readonly description: FieldRef<"Nominee", 'String'>
    readonly photoURL: FieldRef<"Nominee", 'String'>
    readonly nominatorId: FieldRef<"Nominee", 'String'>
    readonly adminId: FieldRef<"Nominee", 'String'>
    readonly status: FieldRef<"Nominee", 'Status'>
  }
    

  // Custom InputTypes
  /**
   * Nominee findUnique
   */
  export type NomineeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    /**
     * Filter, which Nominee to fetch.
     */
    where: NomineeWhereUniqueInput
  }

  /**
   * Nominee findUniqueOrThrow
   */
  export type NomineeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    /**
     * Filter, which Nominee to fetch.
     */
    where: NomineeWhereUniqueInput
  }

  /**
   * Nominee findFirst
   */
  export type NomineeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    /**
     * Filter, which Nominee to fetch.
     */
    where?: NomineeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nominees to fetch.
     */
    orderBy?: NomineeOrderByWithRelationInput | NomineeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nominees.
     */
    cursor?: NomineeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nominees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nominees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nominees.
     */
    distinct?: NomineeScalarFieldEnum | NomineeScalarFieldEnum[]
  }

  /**
   * Nominee findFirstOrThrow
   */
  export type NomineeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    /**
     * Filter, which Nominee to fetch.
     */
    where?: NomineeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nominees to fetch.
     */
    orderBy?: NomineeOrderByWithRelationInput | NomineeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nominees.
     */
    cursor?: NomineeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nominees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nominees.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nominees.
     */
    distinct?: NomineeScalarFieldEnum | NomineeScalarFieldEnum[]
  }

  /**
   * Nominee findMany
   */
  export type NomineeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    /**
     * Filter, which Nominees to fetch.
     */
    where?: NomineeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nominees to fetch.
     */
    orderBy?: NomineeOrderByWithRelationInput | NomineeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nominees.
     */
    cursor?: NomineeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nominees from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nominees.
     */
    skip?: number
    distinct?: NomineeScalarFieldEnum | NomineeScalarFieldEnum[]
  }

  /**
   * Nominee create
   */
  export type NomineeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    /**
     * The data needed to create a Nominee.
     */
    data: XOR<NomineeCreateInput, NomineeUncheckedCreateInput>
  }

  /**
   * Nominee createMany
   */
  export type NomineeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nominees.
     */
    data: NomineeCreateManyInput | NomineeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Nominee update
   */
  export type NomineeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    /**
     * The data needed to update a Nominee.
     */
    data: XOR<NomineeUpdateInput, NomineeUncheckedUpdateInput>
    /**
     * Choose, which Nominee to update.
     */
    where: NomineeWhereUniqueInput
  }

  /**
   * Nominee updateMany
   */
  export type NomineeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nominees.
     */
    data: XOR<NomineeUpdateManyMutationInput, NomineeUncheckedUpdateManyInput>
    /**
     * Filter which Nominees to update
     */
    where?: NomineeWhereInput
  }

  /**
   * Nominee upsert
   */
  export type NomineeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    /**
     * The filter to search for the Nominee to update in case it exists.
     */
    where: NomineeWhereUniqueInput
    /**
     * In case the Nominee found by the `where` argument doesn't exist, create a new Nominee with this data.
     */
    create: XOR<NomineeCreateInput, NomineeUncheckedCreateInput>
    /**
     * In case the Nominee was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NomineeUpdateInput, NomineeUncheckedUpdateInput>
  }

  /**
   * Nominee delete
   */
  export type NomineeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    /**
     * Filter which Nominee to delete.
     */
    where: NomineeWhereUniqueInput
  }

  /**
   * Nominee deleteMany
   */
  export type NomineeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nominees to delete
     */
    where?: NomineeWhereInput
  }

  /**
   * Nominee without action
   */
  export type NomineeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
  }


  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    Position: string | null
  }

  export type AdminMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    Position: string | null
  }

  export type AdminCountAggregateOutputType = {
    id: number
    username: number
    password: number
    Position: number
    _all: number
  }


  export type AdminMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    Position?: true
  }

  export type AdminMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    Position?: true
  }

  export type AdminCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    Position?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    id: string
    username: string
    password: string
    Position: string
    _count: AdminCountAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    Position?: boolean
    Nominee?: boolean | Admin$NomineeArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["admin"]>


  export type AdminSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    Position?: boolean
  }

  export type AdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Nominee?: boolean | Admin$NomineeArgs<ExtArgs>
    _count?: boolean | AdminCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {
      Nominee: Prisma.$NomineePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      Position: string
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AdminFindUniqueArgs>(args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs>(args: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AdminFindFirstArgs>(args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs>(args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adminWithIdOnly = await prisma.admin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AdminFindManyArgs>(args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
     */
    create<T extends AdminCreateArgs>(args: SelectSubset<T, AdminCreateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AdminCreateManyArgs>(args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
     */
    delete<T extends AdminDeleteArgs>(args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AdminUpdateArgs>(args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AdminDeleteManyArgs>(args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AdminUpdateManyArgs>(args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
     */
    upsert<T extends AdminUpsertArgs>(args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Nominee<T extends Admin$NomineeArgs<ExtArgs> = {}>(args?: Subset<T, Admin$NomineeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NomineePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly id: FieldRef<"Admin", 'String'>
    readonly username: FieldRef<"Admin", 'String'>
    readonly password: FieldRef<"Admin", 'String'>
    readonly Position: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin.Nominee
   */
  export type Admin$NomineeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nominee
     */
    select?: NomineeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NomineeInclude<ExtArgs> | null
    where?: NomineeWhereInput
    orderBy?: NomineeOrderByWithRelationInput | NomineeOrderByWithRelationInput[]
    cursor?: NomineeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NomineeScalarFieldEnum | NomineeScalarFieldEnum[]
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdminInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const NominatorScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password'
  };

  export type NominatorScalarFieldEnum = (typeof NominatorScalarFieldEnum)[keyof typeof NominatorScalarFieldEnum]


  export const NomineeScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    phoneNumber: 'phoneNumber',
    address: 'address',
    placeOfWork: 'placeOfWork',
    occupation: 'occupation',
    email: 'email',
    description: 'description',
    photoURL: 'photoURL',
    nominatorId: 'nominatorId',
    adminId: 'adminId',
    status: 'status'
  };

  export type NomineeScalarFieldEnum = (typeof NomineeScalarFieldEnum)[keyof typeof NomineeScalarFieldEnum]


  export const AdminScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    Position: 'Position'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Status'
   */
  export type EnumStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Status'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type NominatorWhereInput = {
    AND?: NominatorWhereInput | NominatorWhereInput[]
    OR?: NominatorWhereInput[]
    NOT?: NominatorWhereInput | NominatorWhereInput[]
    id?: StringFilter<"Nominator"> | string
    username?: StringFilter<"Nominator"> | string
    password?: StringFilter<"Nominator"> | string
    Nominee?: NomineeListRelationFilter
  }

  export type NominatorOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    Nominee?: NomineeOrderByRelationAggregateInput
  }

  export type NominatorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NominatorWhereInput | NominatorWhereInput[]
    OR?: NominatorWhereInput[]
    NOT?: NominatorWhereInput | NominatorWhereInput[]
    username?: StringFilter<"Nominator"> | string
    password?: StringFilter<"Nominator"> | string
    Nominee?: NomineeListRelationFilter
  }, "id">

  export type NominatorOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    _count?: NominatorCountOrderByAggregateInput
    _max?: NominatorMaxOrderByAggregateInput
    _min?: NominatorMinOrderByAggregateInput
  }

  export type NominatorScalarWhereWithAggregatesInput = {
    AND?: NominatorScalarWhereWithAggregatesInput | NominatorScalarWhereWithAggregatesInput[]
    OR?: NominatorScalarWhereWithAggregatesInput[]
    NOT?: NominatorScalarWhereWithAggregatesInput | NominatorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Nominator"> | string
    username?: StringWithAggregatesFilter<"Nominator"> | string
    password?: StringWithAggregatesFilter<"Nominator"> | string
  }

  export type NomineeWhereInput = {
    AND?: NomineeWhereInput | NomineeWhereInput[]
    OR?: NomineeWhereInput[]
    NOT?: NomineeWhereInput | NomineeWhereInput[]
    id?: StringFilter<"Nominee"> | string
    firstName?: StringFilter<"Nominee"> | string
    lastName?: StringFilter<"Nominee"> | string
    phoneNumber?: StringFilter<"Nominee"> | string
    address?: StringFilter<"Nominee"> | string
    placeOfWork?: StringFilter<"Nominee"> | string
    occupation?: StringFilter<"Nominee"> | string
    email?: StringFilter<"Nominee"> | string
    description?: StringFilter<"Nominee"> | string
    photoURL?: StringFilter<"Nominee"> | string
    nominatorId?: StringFilter<"Nominee"> | string
    adminId?: StringFilter<"Nominee"> | string
    status?: EnumStatusFilter<"Nominee"> | $Enums.Status
    nominator?: XOR<NominatorRelationFilter, NominatorWhereInput>
    admin?: XOR<AdminRelationFilter, AdminWhereInput>
  }

  export type NomineeOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    placeOfWork?: SortOrder
    occupation?: SortOrder
    email?: SortOrder
    description?: SortOrder
    photoURL?: SortOrder
    nominatorId?: SortOrder
    adminId?: SortOrder
    status?: SortOrder
    nominator?: NominatorOrderByWithRelationInput
    admin?: AdminOrderByWithRelationInput
  }

  export type NomineeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NomineeWhereInput | NomineeWhereInput[]
    OR?: NomineeWhereInput[]
    NOT?: NomineeWhereInput | NomineeWhereInput[]
    firstName?: StringFilter<"Nominee"> | string
    lastName?: StringFilter<"Nominee"> | string
    phoneNumber?: StringFilter<"Nominee"> | string
    address?: StringFilter<"Nominee"> | string
    placeOfWork?: StringFilter<"Nominee"> | string
    occupation?: StringFilter<"Nominee"> | string
    email?: StringFilter<"Nominee"> | string
    description?: StringFilter<"Nominee"> | string
    photoURL?: StringFilter<"Nominee"> | string
    nominatorId?: StringFilter<"Nominee"> | string
    adminId?: StringFilter<"Nominee"> | string
    status?: EnumStatusFilter<"Nominee"> | $Enums.Status
    nominator?: XOR<NominatorRelationFilter, NominatorWhereInput>
    admin?: XOR<AdminRelationFilter, AdminWhereInput>
  }, "id">

  export type NomineeOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    placeOfWork?: SortOrder
    occupation?: SortOrder
    email?: SortOrder
    description?: SortOrder
    photoURL?: SortOrder
    nominatorId?: SortOrder
    adminId?: SortOrder
    status?: SortOrder
    _count?: NomineeCountOrderByAggregateInput
    _max?: NomineeMaxOrderByAggregateInput
    _min?: NomineeMinOrderByAggregateInput
  }

  export type NomineeScalarWhereWithAggregatesInput = {
    AND?: NomineeScalarWhereWithAggregatesInput | NomineeScalarWhereWithAggregatesInput[]
    OR?: NomineeScalarWhereWithAggregatesInput[]
    NOT?: NomineeScalarWhereWithAggregatesInput | NomineeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Nominee"> | string
    firstName?: StringWithAggregatesFilter<"Nominee"> | string
    lastName?: StringWithAggregatesFilter<"Nominee"> | string
    phoneNumber?: StringWithAggregatesFilter<"Nominee"> | string
    address?: StringWithAggregatesFilter<"Nominee"> | string
    placeOfWork?: StringWithAggregatesFilter<"Nominee"> | string
    occupation?: StringWithAggregatesFilter<"Nominee"> | string
    email?: StringWithAggregatesFilter<"Nominee"> | string
    description?: StringWithAggregatesFilter<"Nominee"> | string
    photoURL?: StringWithAggregatesFilter<"Nominee"> | string
    nominatorId?: StringWithAggregatesFilter<"Nominee"> | string
    adminId?: StringWithAggregatesFilter<"Nominee"> | string
    status?: EnumStatusWithAggregatesFilter<"Nominee"> | $Enums.Status
  }

  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    id?: StringFilter<"Admin"> | string
    username?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    Position?: StringFilter<"Admin"> | string
    Nominee?: NomineeListRelationFilter
  }

  export type AdminOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    Position?: SortOrder
    Nominee?: NomineeOrderByRelationAggregateInput
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    username?: StringFilter<"Admin"> | string
    password?: StringFilter<"Admin"> | string
    Position?: StringFilter<"Admin"> | string
    Nominee?: NomineeListRelationFilter
  }, "id">

  export type AdminOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    Position?: SortOrder
    _count?: AdminCountOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Admin"> | string
    username?: StringWithAggregatesFilter<"Admin"> | string
    password?: StringWithAggregatesFilter<"Admin"> | string
    Position?: StringWithAggregatesFilter<"Admin"> | string
  }

  export type NominatorCreateInput = {
    id?: string
    username: string
    password: string
    Nominee?: NomineeCreateNestedManyWithoutNominatorInput
  }

  export type NominatorUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    Nominee?: NomineeUncheckedCreateNestedManyWithoutNominatorInput
  }

  export type NominatorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Nominee?: NomineeUpdateManyWithoutNominatorNestedInput
  }

  export type NominatorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Nominee?: NomineeUncheckedUpdateManyWithoutNominatorNestedInput
  }

  export type NominatorCreateManyInput = {
    id?: string
    username: string
    password: string
  }

  export type NominatorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type NominatorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type NomineeCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    placeOfWork: string
    occupation: string
    email: string
    description: string
    photoURL: string
    status?: $Enums.Status
    nominator: NominatorCreateNestedOneWithoutNomineeInput
    admin: AdminCreateNestedOneWithoutNomineeInput
  }

  export type NomineeUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    placeOfWork: string
    occupation: string
    email: string
    description: string
    photoURL: string
    nominatorId: string
    adminId: string
    status?: $Enums.Status
  }

  export type NomineeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    placeOfWork?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photoURL?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    nominator?: NominatorUpdateOneRequiredWithoutNomineeNestedInput
    admin?: AdminUpdateOneRequiredWithoutNomineeNestedInput
  }

  export type NomineeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    placeOfWork?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photoURL?: StringFieldUpdateOperationsInput | string
    nominatorId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type NomineeCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    placeOfWork: string
    occupation: string
    email: string
    description: string
    photoURL: string
    nominatorId: string
    adminId: string
    status?: $Enums.Status
  }

  export type NomineeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    placeOfWork?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photoURL?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type NomineeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    placeOfWork?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photoURL?: StringFieldUpdateOperationsInput | string
    nominatorId?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type AdminCreateInput = {
    id?: string
    username: string
    password: string
    Position: string
    Nominee?: NomineeCreateNestedManyWithoutAdminInput
  }

  export type AdminUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    Position: string
    Nominee?: NomineeUncheckedCreateNestedManyWithoutAdminInput
  }

  export type AdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Nominee?: NomineeUpdateManyWithoutAdminNestedInput
  }

  export type AdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
    Nominee?: NomineeUncheckedUpdateManyWithoutAdminNestedInput
  }

  export type AdminCreateManyInput = {
    id?: string
    username: string
    password: string
    Position: string
  }

  export type AdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NomineeListRelationFilter = {
    every?: NomineeWhereInput
    some?: NomineeWhereInput
    none?: NomineeWhereInput
  }

  export type NomineeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NominatorCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type NominatorMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type NominatorMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NominatorRelationFilter = {
    is?: NominatorWhereInput
    isNot?: NominatorWhereInput
  }

  export type AdminRelationFilter = {
    is?: AdminWhereInput
    isNot?: AdminWhereInput
  }

  export type NomineeCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    placeOfWork?: SortOrder
    occupation?: SortOrder
    email?: SortOrder
    description?: SortOrder
    photoURL?: SortOrder
    nominatorId?: SortOrder
    adminId?: SortOrder
    status?: SortOrder
  }

  export type NomineeMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    placeOfWork?: SortOrder
    occupation?: SortOrder
    email?: SortOrder
    description?: SortOrder
    photoURL?: SortOrder
    nominatorId?: SortOrder
    adminId?: SortOrder
    status?: SortOrder
  }

  export type NomineeMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    phoneNumber?: SortOrder
    address?: SortOrder
    placeOfWork?: SortOrder
    occupation?: SortOrder
    email?: SortOrder
    description?: SortOrder
    photoURL?: SortOrder
    nominatorId?: SortOrder
    adminId?: SortOrder
    status?: SortOrder
  }

  export type EnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type AdminCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    Position?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    Position?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    Position?: SortOrder
  }

  export type NomineeCreateNestedManyWithoutNominatorInput = {
    create?: XOR<NomineeCreateWithoutNominatorInput, NomineeUncheckedCreateWithoutNominatorInput> | NomineeCreateWithoutNominatorInput[] | NomineeUncheckedCreateWithoutNominatorInput[]
    connectOrCreate?: NomineeCreateOrConnectWithoutNominatorInput | NomineeCreateOrConnectWithoutNominatorInput[]
    createMany?: NomineeCreateManyNominatorInputEnvelope
    connect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
  }

  export type NomineeUncheckedCreateNestedManyWithoutNominatorInput = {
    create?: XOR<NomineeCreateWithoutNominatorInput, NomineeUncheckedCreateWithoutNominatorInput> | NomineeCreateWithoutNominatorInput[] | NomineeUncheckedCreateWithoutNominatorInput[]
    connectOrCreate?: NomineeCreateOrConnectWithoutNominatorInput | NomineeCreateOrConnectWithoutNominatorInput[]
    createMany?: NomineeCreateManyNominatorInputEnvelope
    connect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NomineeUpdateManyWithoutNominatorNestedInput = {
    create?: XOR<NomineeCreateWithoutNominatorInput, NomineeUncheckedCreateWithoutNominatorInput> | NomineeCreateWithoutNominatorInput[] | NomineeUncheckedCreateWithoutNominatorInput[]
    connectOrCreate?: NomineeCreateOrConnectWithoutNominatorInput | NomineeCreateOrConnectWithoutNominatorInput[]
    upsert?: NomineeUpsertWithWhereUniqueWithoutNominatorInput | NomineeUpsertWithWhereUniqueWithoutNominatorInput[]
    createMany?: NomineeCreateManyNominatorInputEnvelope
    set?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    disconnect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    delete?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    connect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    update?: NomineeUpdateWithWhereUniqueWithoutNominatorInput | NomineeUpdateWithWhereUniqueWithoutNominatorInput[]
    updateMany?: NomineeUpdateManyWithWhereWithoutNominatorInput | NomineeUpdateManyWithWhereWithoutNominatorInput[]
    deleteMany?: NomineeScalarWhereInput | NomineeScalarWhereInput[]
  }

  export type NomineeUncheckedUpdateManyWithoutNominatorNestedInput = {
    create?: XOR<NomineeCreateWithoutNominatorInput, NomineeUncheckedCreateWithoutNominatorInput> | NomineeCreateWithoutNominatorInput[] | NomineeUncheckedCreateWithoutNominatorInput[]
    connectOrCreate?: NomineeCreateOrConnectWithoutNominatorInput | NomineeCreateOrConnectWithoutNominatorInput[]
    upsert?: NomineeUpsertWithWhereUniqueWithoutNominatorInput | NomineeUpsertWithWhereUniqueWithoutNominatorInput[]
    createMany?: NomineeCreateManyNominatorInputEnvelope
    set?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    disconnect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    delete?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    connect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    update?: NomineeUpdateWithWhereUniqueWithoutNominatorInput | NomineeUpdateWithWhereUniqueWithoutNominatorInput[]
    updateMany?: NomineeUpdateManyWithWhereWithoutNominatorInput | NomineeUpdateManyWithWhereWithoutNominatorInput[]
    deleteMany?: NomineeScalarWhereInput | NomineeScalarWhereInput[]
  }

  export type NominatorCreateNestedOneWithoutNomineeInput = {
    create?: XOR<NominatorCreateWithoutNomineeInput, NominatorUncheckedCreateWithoutNomineeInput>
    connectOrCreate?: NominatorCreateOrConnectWithoutNomineeInput
    connect?: NominatorWhereUniqueInput
  }

  export type AdminCreateNestedOneWithoutNomineeInput = {
    create?: XOR<AdminCreateWithoutNomineeInput, AdminUncheckedCreateWithoutNomineeInput>
    connectOrCreate?: AdminCreateOrConnectWithoutNomineeInput
    connect?: AdminWhereUniqueInput
  }

  export type EnumStatusFieldUpdateOperationsInput = {
    set?: $Enums.Status
  }

  export type NominatorUpdateOneRequiredWithoutNomineeNestedInput = {
    create?: XOR<NominatorCreateWithoutNomineeInput, NominatorUncheckedCreateWithoutNomineeInput>
    connectOrCreate?: NominatorCreateOrConnectWithoutNomineeInput
    upsert?: NominatorUpsertWithoutNomineeInput
    connect?: NominatorWhereUniqueInput
    update?: XOR<XOR<NominatorUpdateToOneWithWhereWithoutNomineeInput, NominatorUpdateWithoutNomineeInput>, NominatorUncheckedUpdateWithoutNomineeInput>
  }

  export type AdminUpdateOneRequiredWithoutNomineeNestedInput = {
    create?: XOR<AdminCreateWithoutNomineeInput, AdminUncheckedCreateWithoutNomineeInput>
    connectOrCreate?: AdminCreateOrConnectWithoutNomineeInput
    upsert?: AdminUpsertWithoutNomineeInput
    connect?: AdminWhereUniqueInput
    update?: XOR<XOR<AdminUpdateToOneWithWhereWithoutNomineeInput, AdminUpdateWithoutNomineeInput>, AdminUncheckedUpdateWithoutNomineeInput>
  }

  export type NomineeCreateNestedManyWithoutAdminInput = {
    create?: XOR<NomineeCreateWithoutAdminInput, NomineeUncheckedCreateWithoutAdminInput> | NomineeCreateWithoutAdminInput[] | NomineeUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: NomineeCreateOrConnectWithoutAdminInput | NomineeCreateOrConnectWithoutAdminInput[]
    createMany?: NomineeCreateManyAdminInputEnvelope
    connect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
  }

  export type NomineeUncheckedCreateNestedManyWithoutAdminInput = {
    create?: XOR<NomineeCreateWithoutAdminInput, NomineeUncheckedCreateWithoutAdminInput> | NomineeCreateWithoutAdminInput[] | NomineeUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: NomineeCreateOrConnectWithoutAdminInput | NomineeCreateOrConnectWithoutAdminInput[]
    createMany?: NomineeCreateManyAdminInputEnvelope
    connect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
  }

  export type NomineeUpdateManyWithoutAdminNestedInput = {
    create?: XOR<NomineeCreateWithoutAdminInput, NomineeUncheckedCreateWithoutAdminInput> | NomineeCreateWithoutAdminInput[] | NomineeUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: NomineeCreateOrConnectWithoutAdminInput | NomineeCreateOrConnectWithoutAdminInput[]
    upsert?: NomineeUpsertWithWhereUniqueWithoutAdminInput | NomineeUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: NomineeCreateManyAdminInputEnvelope
    set?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    disconnect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    delete?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    connect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    update?: NomineeUpdateWithWhereUniqueWithoutAdminInput | NomineeUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: NomineeUpdateManyWithWhereWithoutAdminInput | NomineeUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: NomineeScalarWhereInput | NomineeScalarWhereInput[]
  }

  export type NomineeUncheckedUpdateManyWithoutAdminNestedInput = {
    create?: XOR<NomineeCreateWithoutAdminInput, NomineeUncheckedCreateWithoutAdminInput> | NomineeCreateWithoutAdminInput[] | NomineeUncheckedCreateWithoutAdminInput[]
    connectOrCreate?: NomineeCreateOrConnectWithoutAdminInput | NomineeCreateOrConnectWithoutAdminInput[]
    upsert?: NomineeUpsertWithWhereUniqueWithoutAdminInput | NomineeUpsertWithWhereUniqueWithoutAdminInput[]
    createMany?: NomineeCreateManyAdminInputEnvelope
    set?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    disconnect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    delete?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    connect?: NomineeWhereUniqueInput | NomineeWhereUniqueInput[]
    update?: NomineeUpdateWithWhereUniqueWithoutAdminInput | NomineeUpdateWithWhereUniqueWithoutAdminInput[]
    updateMany?: NomineeUpdateManyWithWhereWithoutAdminInput | NomineeUpdateManyWithWhereWithoutAdminInput[]
    deleteMany?: NomineeScalarWhereInput | NomineeScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusFilter<$PrismaModel> | $Enums.Status
  }

  export type NestedEnumStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Status | EnumStatusFieldRefInput<$PrismaModel>
    in?: $Enums.Status[]
    notIn?: $Enums.Status[]
    not?: NestedEnumStatusWithAggregatesFilter<$PrismaModel> | $Enums.Status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatusFilter<$PrismaModel>
    _max?: NestedEnumStatusFilter<$PrismaModel>
  }

  export type NomineeCreateWithoutNominatorInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    placeOfWork: string
    occupation: string
    email: string
    description: string
    photoURL: string
    status?: $Enums.Status
    admin: AdminCreateNestedOneWithoutNomineeInput
  }

  export type NomineeUncheckedCreateWithoutNominatorInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    placeOfWork: string
    occupation: string
    email: string
    description: string
    photoURL: string
    adminId: string
    status?: $Enums.Status
  }

  export type NomineeCreateOrConnectWithoutNominatorInput = {
    where: NomineeWhereUniqueInput
    create: XOR<NomineeCreateWithoutNominatorInput, NomineeUncheckedCreateWithoutNominatorInput>
  }

  export type NomineeCreateManyNominatorInputEnvelope = {
    data: NomineeCreateManyNominatorInput | NomineeCreateManyNominatorInput[]
    skipDuplicates?: boolean
  }

  export type NomineeUpsertWithWhereUniqueWithoutNominatorInput = {
    where: NomineeWhereUniqueInput
    update: XOR<NomineeUpdateWithoutNominatorInput, NomineeUncheckedUpdateWithoutNominatorInput>
    create: XOR<NomineeCreateWithoutNominatorInput, NomineeUncheckedCreateWithoutNominatorInput>
  }

  export type NomineeUpdateWithWhereUniqueWithoutNominatorInput = {
    where: NomineeWhereUniqueInput
    data: XOR<NomineeUpdateWithoutNominatorInput, NomineeUncheckedUpdateWithoutNominatorInput>
  }

  export type NomineeUpdateManyWithWhereWithoutNominatorInput = {
    where: NomineeScalarWhereInput
    data: XOR<NomineeUpdateManyMutationInput, NomineeUncheckedUpdateManyWithoutNominatorInput>
  }

  export type NomineeScalarWhereInput = {
    AND?: NomineeScalarWhereInput | NomineeScalarWhereInput[]
    OR?: NomineeScalarWhereInput[]
    NOT?: NomineeScalarWhereInput | NomineeScalarWhereInput[]
    id?: StringFilter<"Nominee"> | string
    firstName?: StringFilter<"Nominee"> | string
    lastName?: StringFilter<"Nominee"> | string
    phoneNumber?: StringFilter<"Nominee"> | string
    address?: StringFilter<"Nominee"> | string
    placeOfWork?: StringFilter<"Nominee"> | string
    occupation?: StringFilter<"Nominee"> | string
    email?: StringFilter<"Nominee"> | string
    description?: StringFilter<"Nominee"> | string
    photoURL?: StringFilter<"Nominee"> | string
    nominatorId?: StringFilter<"Nominee"> | string
    adminId?: StringFilter<"Nominee"> | string
    status?: EnumStatusFilter<"Nominee"> | $Enums.Status
  }

  export type NominatorCreateWithoutNomineeInput = {
    id?: string
    username: string
    password: string
  }

  export type NominatorUncheckedCreateWithoutNomineeInput = {
    id?: string
    username: string
    password: string
  }

  export type NominatorCreateOrConnectWithoutNomineeInput = {
    where: NominatorWhereUniqueInput
    create: XOR<NominatorCreateWithoutNomineeInput, NominatorUncheckedCreateWithoutNomineeInput>
  }

  export type AdminCreateWithoutNomineeInput = {
    id?: string
    username: string
    password: string
    Position: string
  }

  export type AdminUncheckedCreateWithoutNomineeInput = {
    id?: string
    username: string
    password: string
    Position: string
  }

  export type AdminCreateOrConnectWithoutNomineeInput = {
    where: AdminWhereUniqueInput
    create: XOR<AdminCreateWithoutNomineeInput, AdminUncheckedCreateWithoutNomineeInput>
  }

  export type NominatorUpsertWithoutNomineeInput = {
    update: XOR<NominatorUpdateWithoutNomineeInput, NominatorUncheckedUpdateWithoutNomineeInput>
    create: XOR<NominatorCreateWithoutNomineeInput, NominatorUncheckedCreateWithoutNomineeInput>
    where?: NominatorWhereInput
  }

  export type NominatorUpdateToOneWithWhereWithoutNomineeInput = {
    where?: NominatorWhereInput
    data: XOR<NominatorUpdateWithoutNomineeInput, NominatorUncheckedUpdateWithoutNomineeInput>
  }

  export type NominatorUpdateWithoutNomineeInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type NominatorUncheckedUpdateWithoutNomineeInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUpsertWithoutNomineeInput = {
    update: XOR<AdminUpdateWithoutNomineeInput, AdminUncheckedUpdateWithoutNomineeInput>
    create: XOR<AdminCreateWithoutNomineeInput, AdminUncheckedCreateWithoutNomineeInput>
    where?: AdminWhereInput
  }

  export type AdminUpdateToOneWithWhereWithoutNomineeInput = {
    where?: AdminWhereInput
    data: XOR<AdminUpdateWithoutNomineeInput, AdminUncheckedUpdateWithoutNomineeInput>
  }

  export type AdminUpdateWithoutNomineeInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
  }

  export type AdminUncheckedUpdateWithoutNomineeInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    Position?: StringFieldUpdateOperationsInput | string
  }

  export type NomineeCreateWithoutAdminInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    placeOfWork: string
    occupation: string
    email: string
    description: string
    photoURL: string
    status?: $Enums.Status
    nominator: NominatorCreateNestedOneWithoutNomineeInput
  }

  export type NomineeUncheckedCreateWithoutAdminInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    placeOfWork: string
    occupation: string
    email: string
    description: string
    photoURL: string
    nominatorId: string
    status?: $Enums.Status
  }

  export type NomineeCreateOrConnectWithoutAdminInput = {
    where: NomineeWhereUniqueInput
    create: XOR<NomineeCreateWithoutAdminInput, NomineeUncheckedCreateWithoutAdminInput>
  }

  export type NomineeCreateManyAdminInputEnvelope = {
    data: NomineeCreateManyAdminInput | NomineeCreateManyAdminInput[]
    skipDuplicates?: boolean
  }

  export type NomineeUpsertWithWhereUniqueWithoutAdminInput = {
    where: NomineeWhereUniqueInput
    update: XOR<NomineeUpdateWithoutAdminInput, NomineeUncheckedUpdateWithoutAdminInput>
    create: XOR<NomineeCreateWithoutAdminInput, NomineeUncheckedCreateWithoutAdminInput>
  }

  export type NomineeUpdateWithWhereUniqueWithoutAdminInput = {
    where: NomineeWhereUniqueInput
    data: XOR<NomineeUpdateWithoutAdminInput, NomineeUncheckedUpdateWithoutAdminInput>
  }

  export type NomineeUpdateManyWithWhereWithoutAdminInput = {
    where: NomineeScalarWhereInput
    data: XOR<NomineeUpdateManyMutationInput, NomineeUncheckedUpdateManyWithoutAdminInput>
  }

  export type NomineeCreateManyNominatorInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    placeOfWork: string
    occupation: string
    email: string
    description: string
    photoURL: string
    adminId: string
    status?: $Enums.Status
  }

  export type NomineeUpdateWithoutNominatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    placeOfWork?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photoURL?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    admin?: AdminUpdateOneRequiredWithoutNomineeNestedInput
  }

  export type NomineeUncheckedUpdateWithoutNominatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    placeOfWork?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photoURL?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type NomineeUncheckedUpdateManyWithoutNominatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    placeOfWork?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photoURL?: StringFieldUpdateOperationsInput | string
    adminId?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type NomineeCreateManyAdminInput = {
    id?: string
    firstName: string
    lastName: string
    phoneNumber: string
    address: string
    placeOfWork: string
    occupation: string
    email: string
    description: string
    photoURL: string
    nominatorId: string
    status?: $Enums.Status
  }

  export type NomineeUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    placeOfWork?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photoURL?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
    nominator?: NominatorUpdateOneRequiredWithoutNomineeNestedInput
  }

  export type NomineeUncheckedUpdateWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    placeOfWork?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photoURL?: StringFieldUpdateOperationsInput | string
    nominatorId?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }

  export type NomineeUncheckedUpdateManyWithoutAdminInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    placeOfWork?: StringFieldUpdateOperationsInput | string
    occupation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    photoURL?: StringFieldUpdateOperationsInput | string
    nominatorId?: StringFieldUpdateOperationsInput | string
    status?: EnumStatusFieldUpdateOperationsInput | $Enums.Status
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use NominatorCountOutputTypeDefaultArgs instead
     */
    export type NominatorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NominatorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminCountOutputTypeDefaultArgs instead
     */
    export type AdminCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NominatorDefaultArgs instead
     */
    export type NominatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NominatorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NomineeDefaultArgs instead
     */
    export type NomineeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NomineeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}